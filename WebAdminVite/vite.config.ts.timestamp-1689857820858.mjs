// vite.config.ts
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import AutoImport from "unplugin-auto-import/vite";
import Components from "unplugin-vue-components/vite";
import { createSvgIconsPlugin } from "vite-plugin-svg-icons";
import { resolve } from "path";
var __vite_injected_original_dirname = "C:\\wamp64\\www\\Opshell\\webadminvite";
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@": resolve(__vite_injected_original_dirname, "src")
    }
  },
  plugins: [
    vue(),
    AutoImport({
      imports: [
        "vue",
        "vue-router",
        "vuex",
        {
          "@vueuse/core": [
            "useMouse",
            ["useFetch", "useMyFetch"]
          ],
          axios: [
            ["default", "axios"]
          ],
          vue: ["PropType", "defineProps", "InjectionKey", "Ref"]
        }
      ],
      dirs: [],
      dts: "src/types/auto-imports.d.ts",
      vueTemplate: false,
      eslintrc: {
        enabled: false,
        filepath: "./.eslintrc-auto-import.json",
        globalsPropValue: true
      }
    }),
    Components({
      dirs: ["src/components", "src/views"],
      dts: "src/types/components.d.ts",
      extensions: ["vue"]
    }),
    createSvgIconsPlugin({
      iconDirs: [resolve(process.cwd(), "src/assets/icons")],
      symbolId: "[name]",
      inject: "body-last",
      customDomId: "__svg__icons__dom__"
    })
  ],
  base: "/webadmin",
  build: {
    outDir: "../webadmin"
  },
  server: {
    port: 8080,
    strictPort: false,
    open: true,
    proxy: {
      "/api": {
        target: "http://www.opshell/api/",
        ws: true,
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, "")
      }
    }
  },
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@import "@/assets/scss/stylesheet.scss";`,
        charset: false
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
